<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thwllms</title>
    <description>thwllms&apos; personal blog.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Default HEC-RAS Version</title>
        <description>&lt;p&gt;This was driving me ever so slightly nuts for a little while.
I’ve had &lt;a href=&quot;https://www.hec.usace.army.mil/software/hec-ras/&quot;&gt;HEC-RAS&lt;/a&gt;
6.4.1 on my work laptop (Windows 10) and recently
installed version 6.5, too. Previously I set my machine to open 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.prj&lt;/code&gt; files with HEC-RAS 6.4.1. I’ve been wanting them to open with version
6.5 by default, but no matter what I did they were still opening with
6.4.1.&lt;/p&gt;

&lt;p&gt;I figured there was probably some system registry setting that
would allow me to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.prj&lt;/code&gt; files to open with HEC-RAS 6.5 instead.
I’ve been leaning heavily on ChatGPT for technical issues like this
to avoid digging through documentation and StackOverflow answers,
and it didn’t disappoint.&lt;/p&gt;

&lt;p&gt;Here are the instructions ChatGPT landed on after a couple rounds of
back-and-forth…&lt;/p&gt;

&lt;h3 id=&quot;step-by-step-instructions&quot;&gt;Step-by-Step Instructions:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Navigate to UserChoice Key:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Go to:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.prj\UserChoice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Change the ProgId:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserChoice&lt;/code&gt; key, find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProgId&lt;/code&gt;. This tells Windows which application to use for opening &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.prj&lt;/code&gt; files.&lt;/li&gt;
      &lt;li&gt;Since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProgId&lt;/code&gt; is currently set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prj_auto_file&lt;/code&gt;, you need to ensure that this is linked to the correct executable path in another part of the registry.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Modify the Default Program in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prj_auto_file&lt;/code&gt;:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Go to:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HKEY_CLASSES_ROOT\prj_auto_file\shell\open\command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Check the default value here—it should be pointing to the executable for HEC-RAS. This is where you can specify the path to the new version of the application. If this key does not exist, you will need to create it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;create-or-modify-the-command-key&quot;&gt;Create or Modify the Command Key:&lt;/h3&gt;
&lt;p&gt;If the path needs to be updated or created, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Navigate or Create Keys:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_CLASSES_ROOT&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Look for a key named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prj_auto_file&lt;/code&gt;. If it doesn’t exist, you need to create it by right-clicking on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_CLASSES_ROOT&lt;/code&gt;, selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New &amp;gt; Key&lt;/code&gt;, and naming it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prj_auto_file&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prj_auto_file&lt;/code&gt;, create a new key named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell&lt;/code&gt; if it doesn’t exist.&lt;/li&gt;
      &lt;li&gt;Inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell&lt;/code&gt;, create another key named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt;, create a final key named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set the Default Program:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command&lt;/code&gt; key, double-click the default value and change it to:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;C:\Program Files (x86)\HEC\HEC-RAS\6.5\Ras.exe&quot; &quot;%1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%1&lt;/code&gt; allows the program to receive the file as an argument.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;apply-changes-and-test&quot;&gt;Apply Changes and Test:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Close the Registry Editor.&lt;/li&gt;
  &lt;li&gt;Restart your computer to ensure the changes take effect.&lt;/li&gt;
  &lt;li&gt;Try opening a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.prj&lt;/code&gt; file to see if it opens with the correct version of HEC-RAS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;note&quot;&gt;Note:&lt;/h3&gt;
&lt;p&gt;This is a sensitive process, as incorrect changes to the registry can cause applications or the system to behave unexpectedly. If you’re not comfortable doing this, it might be wise to consult with an IT professional or someone familiar with Windows system administration.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 May 2024 07:11:11 -0400</pubDate>
        <link>http://localhost:4000/blog/2024/05/29/default-hecras-version/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2024/05/29/default-hecras-version/</guid>
      </item>
    
      <item>
        <title>Making Space</title>
        <description>&lt;p&gt;My disk has been verging on 100% capacity for a long time. I’ve
always known that the problem is Docker, but I finally got around
to resolving it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker system prune
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This took a while to run, but cleared an embarassing amount of space.
I followed this up with optimizing Docker’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext4.vhdx&lt;/code&gt; file. 
The top answers on Stack Overflow point to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optimize-Vhd&lt;/code&gt; command,
which wasn’t found on my system. Instead, I followed
&lt;a href=&quot;https://github.com/microsoft/WSL/issues/4699#issuecomment-627133168&quot;&gt;these steps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shut down Docker Desktop, then:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; wsl --shutdown
&amp;gt; diskpart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A new shell window opens with the Diskpart program running. Then from the Diskpart
command line:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; select vdisk file=&quot;C:\Users\…\ext4.vhdx&quot;
&amp;gt; attach vdisk readonly
&amp;gt; compact vdisk
&amp;gt; detach vdisk
&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 27 Mar 2023 07:11:11 -0400</pubDate>
        <link>http://localhost:4000/blog/2023/03/27/making-space/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2023/03/27/making-space/</guid>
      </item>
    
      <item>
        <title>Voiding the warranty on my keyboard</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/controllers.jpg&quot; alt=&quot;top: original; bottom: hasu&quot; /&gt;
&lt;em&gt;top: stock FC660C controller; bottom: Hasu FC660C controller&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’m the proud owner of a &lt;a href=&quot;https://mechanicalkeyboards.com/shop/index.php?l=product_detail&amp;amp;p=3829&quot;&gt;Leopold
FC660C&lt;/a&gt;
keyboard. I love the feel of the Topre switches, and it’s the perfect size. The
layout, however, is not &lt;em&gt;quite&lt;/em&gt;
perfect.&lt;/p&gt;

&lt;p&gt;For instance, I prefer to use Caps Lock as an Escape key. The backtick/tilde key
on the FC660C shares a spot with Escape, which is slightly weird. I also like to
switch LCtrl and LGui. I cobbled together a software solution to get the layout
I wanted, using a combination of &lt;a href=&quot;https://pqrs.org/osx/karabiner/&quot;&gt;Karabiner
Elements&lt;/a&gt; and the macOS keyboard options. But
if I ever wanted to use my keyboard on a different computer, I’d have to set it
up all over again.&lt;/p&gt;

&lt;p&gt;This weekend I switched out the keyboard’s stock controller for the &lt;a href=&quot;https://www.1upkeyboards.com/shop/controllers/fc660c-controller/&quot;&gt;Hasu FC660C
Controller&lt;/a&gt;.
Now my keyboard is fully programmable! No extra software configuration on
different computers.&lt;/p&gt;

&lt;p&gt;I’m not well-versed in electronics, and I was terrified of screwing up my
precious keyboard or the Hasu controller. But the installation turned out to be
super straightforward. I’m really happy with the results.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://geekhack.org/index.php?topic=90317.0&quot;&gt;Installation instructions from Hasu himself&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=TYmAb8zOPWU&amp;amp;feature=youtu.be&amp;amp;t=3m6s&quot;&gt;Great video on installing controller (flashing steps are Windows-only, though)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tmk-kbd.com/tmk_keyboard/editor/unimap/?fc660c&quot;&gt;Keymap editor to generate the hex file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps-followed-macos&quot;&gt;Steps followed (macOS)&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install dfu-programmer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;On the back of the keyboard, remove the “OK” warranty sticker and the black
screw underneath&lt;/li&gt;
  &lt;li&gt;Gently pry open the gap between the back and the front bezel; insert a few
credit cards to keep it open&lt;/li&gt;
  &lt;li&gt;Slowly, carefully, pry and pop off the bezel&lt;/li&gt;
  &lt;li&gt;Unscrew the controller from the back (2 smaller silver screws)&lt;/li&gt;
  &lt;li&gt;Remove the ribbon cable from the stock controller&lt;/li&gt;
  &lt;li&gt;Insert the ribbon cable into the Hasu controller&lt;/li&gt;
  &lt;li&gt;Screw down the Hasu controller&lt;/li&gt;
  &lt;li&gt;Replace the screw on the back&lt;/li&gt;
  &lt;li&gt;Pop the front bezel back on&lt;/li&gt;
  &lt;li&gt;Plug the keyboard in and verify that it works&lt;/li&gt;
  &lt;li&gt;Use the &lt;a href=&quot;http://www.tmk-kbd.com/tmk_keyboard/editor/unimap/?fc660c&quot;&gt;keymap
editor&lt;/a&gt; to set the
desired layout and download the resulting hex file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unimap.hex&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Press the button on the back of the keyboard on the Hasu controller (where
the dipswitches on the stock controller used to be) to put the controller in
bootloader mode&lt;/li&gt;
  &lt;li&gt;Clear the controller memory
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ dfu-programmer atmega32u4 erase --force
  Erasing flash...  Success
  Checking memory from 0x0 to 0x6FFF...  Empty.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Load the new hex file
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ dfu-programmer atmega32u4 flash ~/Downloads/unimap.hex
  Checking memory from 0x0 to 0x6FFF...  Empty.
  0%                            100%  Programming 0x7000 bytes...
  [&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;]  Success
  0%                            100%  Reading 0x7000 bytes...
  [&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;]  Success
  Validating...  Success
  0x7000 bytes written into 0x7000 bytes memory (100.00%).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reset the controller state
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ dfu-programmer atmega32u4 reset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 07 Jul 2019 10:22:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2019/07/07/keyboard-controller/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/07/07/keyboard-controller/</guid>
      </item>
    
      <item>
        <title>What&apos;s the toll on I-66? (dot com)</title>
        <description>&lt;p&gt;TL;DR: I made a website - &lt;a href=&quot;http://whatsthetolloni66.com&quot;&gt;whatsthetolloni66.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/whats-the-toll.gif&quot; alt=&quot;:q&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anyone who commutes to DC from Northern Virginia knows about the rush-hour
congestion pricing on I-66. HOV-2+ vehicles are free, but solo drivers can
expect to pay &lt;a href=&quot;http://www.fox5dc.com/news/local-news/i-66-express-lanes-toll-spikes-to-46-for-tuesday-morning-commute&quot;&gt;a
&lt;em&gt;lot&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Occasionally I have to drive toward DC for work. I-66 is usually the fastest
route, but toll prices can be all over the place ($20 from I-495 to DC is not
unusual, although with light traffic it can be less than $5). I’ve tried
checking VDOT’s &lt;a href=&quot;vai66tolls.com&quot;&gt;vai66tolls.com&lt;/a&gt; website before heading out, but
the price always changes by the time I actually get to I-66. Quickly checking
the site on my phone is &lt;em&gt;not&lt;/em&gt; an option - the interface definitely isn’t
intended to be used on mobile devices.&lt;/p&gt;

&lt;p&gt;A while ago I decided to scrape the I-66 toll data from VDOT’s website. This
turned out to be more difficult than I assumed.  The VDOT site’s interface sends
multiple POST requests back to the server before the toll is actually returned.
It took a while to figure out what these requests actually accomplish,
especially since the requests include lots of extraneous form data. Eventually I
arrived at Python script that could replicate the series of requests and extract
the toll for a given route.&lt;/p&gt;

&lt;p&gt;Recently I transformed that Python script into a small API with Flask and got it
running on AWS Lambda. Then I built a really basic React UI - which is
definitely overkill, but whatever. So… here it is:
&lt;a href=&quot;http://whatsthetolloni66.com&quot;&gt;whatsthetolloni66.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much, but actually pretty useful. Planning to add new features here and
there.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Jun 2019 05:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2019/06/24/whats-the-toll/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/06/24/whats-the-toll/</guid>
      </item>
    
      <item>
        <title>Prometheus&apos; Carbon Capture Claims</title>
        <description>&lt;p&gt;Climate change is something I find myself fretting about from time to time. Two
hundred years from now I think it might be regarded as the driving issue of the
21st century. The scale of climate change is difficult to grasp intuitively.
Many solutions are touted (renewable energy, carbon capture, geoengineering,
etc.), but without putting them in context it’s hard to understand how effective
they might actually be.&lt;/p&gt;

&lt;p&gt;A couple weeks ago the founder of a company called Prometheus posted a &lt;a href=&quot;https://news.ycombinator.com/item?id=19842240&quot;&gt;thread
on Hacker News&lt;/a&gt; introducing his
company’s technology, which converts CO&lt;sub&gt;2&lt;/sub&gt; into gasoline and other
fuels. Apparently they grab CO&lt;sub&gt;2&lt;/sub&gt; from the air, mix it with water, do
some fancy chemistry to turn the CO&lt;sub&gt;2&lt;/sub&gt; into alcohols, extract the
alcohols using a carbon nanotube membrane, and up-convert the alcohols into
fuel.&lt;/p&gt;

&lt;p&gt;A good portion of the thread is about electricity costs, fuel costs, and the
viability of Prometheus as a business. A bit deeper in the conversation the
founder mentioned that they “expect a gallon of gasoline to require 60 kWh of
electrical energy.”&lt;/p&gt;

&lt;p&gt;This got me wondering - if this process was infinitely scalable, how much energy
would it take to make the entire planet carbon-neutral? In other words, what if
we simply stored the resulting gasoline instead of burning it? Humankind emits
something like &lt;a href=&quot;https://www.co2.earth/global-co2-emissions&quot;&gt;36 gigatonnes of CO&lt;sub&gt;2&lt;/sub&gt; per
year&lt;/a&gt;. At 60 kWh per gallon of
gasoline produced by Prometheus’ technology, what would it take to get from 36
gigatonnes of emissions to zero?&lt;/p&gt;

&lt;p&gt;Here’s a basic equation:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;co2_removed = co2_per_gallon * (1/energy_per_gallon) * total_energy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;co2_removed&lt;/code&gt;: kilograms of carbon removed by the process.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;co2_per_gallon&lt;/code&gt;: kilograms of CO&lt;sub&gt;2&lt;/sub&gt; removed from the atmosphere to
create a gallon of gasoline.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;energy_per_gallon&lt;/code&gt;: kilowatt-hours required to produce one gallon of
gasoline.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total_energy&lt;/code&gt;: kilowatt-hours consumed by the process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rearranging to solve for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total_energy&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;total_energy = co2_removed * energy_per_gallon / co2_per_gallon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One gallon of gasoline converts to about &lt;a href=&quot;https://www.fueleconomy.gov/feg/contentIncludes/co2_inc.htm&quot;&gt;20 lbs (9.1 kg) of
CO&lt;sub&gt;2&lt;/sub&gt;&lt;/a&gt;
when burned; for simplicity we’ll also assume that Prometheus’ technology
removes that same amount of CO&lt;sub&gt;2&lt;/sub&gt; per gallon of gasoline produced.  To
make things really simple, we’ll assume that the energy used by the process
comes from carbon-neutral sources.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;total_energy = 36*10^12 kg * 60 kWh/gal / 9.1 kg/gal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.4*10^14 kWh&lt;/code&gt;, or 24,000 TWh. By comparison, &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_countries_by_electricity_production&quot;&gt;in 2017 the United
States produced 4,282 TWh of electricity, and worldwide production was 25,551
TWh&lt;/a&gt;.
In other words, this process would consume &lt;strong&gt;56 times the current US electrical
generating capacity&lt;/strong&gt;, and &lt;strong&gt;9 times the current world electrical generating
capacity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Even if Prometheus’ technology removes many, many times more CO&lt;sub&gt;2&lt;/sub&gt; per
gallon of gasoline produced, we’re still talking sci-fi levels of energy.&lt;/p&gt;

&lt;p&gt;If, somehow, we could produce that much energy to scale the process, what would
we do with all the gasoline? Assuming the same 9.1 kg CO&lt;sub&gt;2&lt;/sub&gt; per gallon
figure, converting 36 gigatonnes of CO&lt;sub&gt;2&lt;/sub&gt; would result in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4*10^12&lt;/code&gt;
gallons of gasoline, or 3.6 cubic miles. That’s almost enough to fill &lt;a href=&quot;https://en.wikipedia.org/wiki/Seneca_Lake_(New_York)&quot;&gt;Seneca
Lake&lt;/a&gt;. A cube of gasoline,
1.53 miles on each side. Annually.&lt;/p&gt;

&lt;p&gt;Oof. Hopefully I’m off… by many orders of magnitude.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 May 2019 18:20:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2019/05/21/prometheus-hackernews-climate-change/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/05/21/prometheus-hackernews-climate-change/</guid>
      </item>
    
      <item>
        <title>Vimscript: a search/replace shortcut</title>
        <description>&lt;p&gt;&lt;em&gt;Updated 2 May 2019.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; Vim, but one thing that drove me crazy for a long time was
search/replace. It’s easy to search for the current word under the cursor - just
press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; in normal mode to start cycling through matches. But replacing that
word can be annoying if it’s really long. You end up with a lot of keystrokes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:%s/mySuperLongVariableName/myNewSuperLongVariableName/gc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One way to save a few keystrokes is to yank &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mySuperLongVariableName&lt;/code&gt; and paste
it into the search command. You can do this by yanking the text you want to
replace (e.g. select in visual mode and press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;), typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%s/&lt;/code&gt; to start the
search, then pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; followed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; to paste the search text.&lt;/p&gt;

&lt;p&gt;But that’s still an annoying number of steps. I wrote the script below to start
a search/replace command by simply pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;c-s&amp;gt;&lt;/code&gt;. It grabs the current word
under the cursor and prompts for the rest of the replace command.  In other
words, pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;c-s&amp;gt;&lt;/code&gt; eliminates need to type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%s/mySuperLongVariableName/&lt;/code&gt;.
Just fill out the rest.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; SearchReplaceCurrentWord&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; cword &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&amp;lt;cword&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; userInput &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;:%s/\&amp;lt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; cword &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&amp;gt;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;userInput&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    exe &lt;span class=&quot;s1&quot;&gt;&apos;%s/\&amp;lt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; cword &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;\&amp;gt;/&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; userInput
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;noremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SearchReplaceCurrentWord&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Update (2 May 2019): I ran into an issue with the original version of this
script where I accidentally did a replace on a partial match. For instance, I
tried to replace the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barstool&lt;/code&gt;, but in doing so changed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barometric&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barstoolometric&lt;/code&gt;. Wrapping the search term in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&amp;lt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&amp;gt;&lt;/code&gt;
instead (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:%s/\&amp;lt;this\&amp;gt;/that&lt;/code&gt;) tells Vim to replace whole-word matches only.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Mar 2019 04:11:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2019/03/18/vimscript-search-replace-shortcut/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/03/18/vimscript-search-replace-shortcut/</guid>
      </item>
    
      <item>
        <title>Vimscript: auto-highlight matching words</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/toggle-highlight-480.gif&quot; alt=&quot;:q&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a small script I cobbled together for my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;. I use it every
single day.  Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;c-h&amp;gt;&lt;/code&gt; to toggle auto-highlighting of matching words in
normal mode.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; ToggleAutoHighlightMatchingWord&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;#ToggleAutoHighlightMatchingWordGroup#CursorMoved&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    exe &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;match IncSearch /\V\&amp;lt;%s\&amp;gt;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;      \&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&amp;lt;cword&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/\&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    augroup ToggleAutoHighlightMatchingWordGroup
      autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
      autocmd &lt;span class=&quot;nb&quot;&gt;CursorMoved&lt;/span&gt; * exe &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;match IncSearch /\V\&amp;lt;%s\&amp;gt;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;            \&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&amp;lt;cword&amp;gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/\&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    augroup END
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; currentTab &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tabpagenr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; currentWindow &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tabpagewinnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;currentTab&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    exe &lt;span class=&quot;s1&quot;&gt;&apos;tabdo windo match IncSeach //&apos;&lt;/span&gt;
    exe currentTab &lt;span class=&quot;s1&quot;&gt;&apos;tabn&apos;&lt;/span&gt;
    exe currentWindow &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;wincmd w&apos;&lt;/span&gt;
    augroup ToggleAutoHighlightMatchingWordGroup
      autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
    augroup END
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;noremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; ToggleAutoHighlightMatchingWord&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Mar 2019 07:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2019/03/10/vimscript-highlight-cword/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/03/10/vimscript-highlight-cword/</guid>
      </item>
    
      <item>
        <title>TIL: the sticky bit</title>
        <description>&lt;p&gt;&lt;em&gt;Retroactively published on 8 Mar 2019. A while ago I started keeping a journal
of TILs, and I’ve decided to share some of them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today I learned about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sticky_bit&quot;&gt;sticky bit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I set up a Samba share on a Raspberry Pi for our household scanner. The scanner
dumps files into a shared directory, and we can triage them from our computers
or phones. It seemed to be working fine, but then I realized that I wasn’t able
to delete files. I could create and read files, but delete just didn’t work.&lt;/p&gt;

&lt;p&gt;Here’s how the directory looked:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -lah / | grep scanner
drwxrwxrwt   2 scanner scanner 4.0K Oct  7 18:52 scanner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At first I figured there was some sort of group permissions problem. But adding
my user to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanner&lt;/code&gt; group didn’t solve it.&lt;/p&gt;

&lt;p&gt;Turns out it was the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; - the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sticky_bit&quot;&gt;sticky
bit&lt;/a&gt;. This was preventing any user who
wasn’t &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanner&lt;/code&gt; from deleting files in that directory.&lt;/p&gt;

&lt;p&gt;Removing the sticky bit fixed the problem.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chmod -t /scanner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 07 Oct 2018 08:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2018/10/07/til-sticky-bit/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/07/til-sticky-bit/</guid>
      </item>
    
      <item>
        <title>TIL: switching git remotes</title>
        <description>&lt;p&gt;&lt;em&gt;Retroactively published on 8 Mar 2019. A while ago I started keeping a journal
of TILs, and I’ve decided to share some of them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At work we recently migrated our projects from GitLab to Bitbucket. (Sigh… I
miss GitLab CI.) After the repositories were copied to Bitbucket, I had
reshuffle my git remotes and active branches to point to Bitbucket:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote rename origin upstream
$ git remote add origin &amp;lt;new-remote-ssh-url&amp;gt;
$ git checkout master
$ git branch --set-upstream-to origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 01 Aug 2018 08:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2018/08/01/til-changing-git-remotes/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/08/01/til-changing-git-remotes/</guid>
      </item>
    
      <item>
        <title>TIL: git checkout -m</title>
        <description>&lt;p&gt;&lt;em&gt;Retroactively published on 8 Mar 2019. A while ago I started keeping a journal
of TILs, and I’ve decided to share some of them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You’re doing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; and you hit some conflicts. You open an offending
file and make changes. But then you realize that you’ve made some &lt;em&gt;bad&lt;/em&gt; changes.
How do you get back to the original merged (albeit conflicted) file?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout -m &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://gitster.livejournal.com/43665.html&quot;&gt;this&lt;/a&gt; post.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Apr 2018 08:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2018/04/03/til-git-checkout-m/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/04/03/til-git-checkout-m/</guid>
      </item>
    
  </channel>
</rss>
