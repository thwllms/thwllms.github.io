<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thwllms</title>
    <description>thwllms' personal blog.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Prometheus' Carbon Capture Claims</title>
        <description>&lt;p&gt;Climate change is something I find myself fretting about from time to time. Two
hundred years from now I think it might be regarded as the driving issue of the
21st century. The scale of climate change is so large that it’s difficult to
grasp intuitively. There many solutions touted (renewable energy, carbon
capture, geoengineering, etc.), but without putting them in context it’s hard to
understand how effective they might actually be.&lt;/p&gt;

&lt;p&gt;A couple weeks ago the founder of a company called Prometheus posted a &lt;a href=&quot;https://news.ycombinator.com/item?id=19842240&quot;&gt;thread
on Hacker News&lt;/a&gt; introducing his
company’s technology, which converts CO&lt;sub&gt;2&lt;/sub&gt; into gasoline and other
fuels. Apparently they grab CO&lt;sub&gt;2&lt;/sub&gt; from the air, mix it with water, do
some fancy chemistry to turn the CO&lt;sub&gt;2&lt;/sub&gt; into alcohols, extract the
alcohols using a carbon nanotube membrane, and up-convert the alcohols into
fuel.&lt;/p&gt;

&lt;p&gt;A good portion of the thread is about electricity costs, fuel costs, and the
viability of Prometheus as a business. A bit deeper in the conversation the
founder mentioned that they “expect a gallon of gasoline to require 60 kWh of
electrical energy.”&lt;/p&gt;

&lt;p&gt;This got me wondering - if this process was infinitely scalable, how much energy
would it take to make the entire planet carbon-neutral? Humankind emits
something like &lt;a href=&quot;https://www.co2.earth/global-co2-emissions&quot;&gt;36 gigatonnes of CO&lt;sub&gt;2&lt;/sub&gt; per
year&lt;/a&gt;. At 60 kWh per gallon of
gasoline produced by Prometheus’ technology, what would it take to get from 36
gigatonnes of emissions to zero?&lt;/p&gt;

&lt;p&gt;Here’s a basic equation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;co2_removed = co2_per_gallon * (1/energy_per_gallon) * total_energy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;co2_removed&lt;/code&gt;: kilograms of carbon removed by the process.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;co2_per_gallon&lt;/code&gt;: kilograms of CO&lt;sub&gt;2&lt;/sub&gt; removed from the atmosphere to
create a gallon of gasoline.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;energy_per_gallon&lt;/code&gt;: kilowatt-hours required to produce one gallon of
gasoline.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;total_energy&lt;/code&gt;: kilowatt-hours consumed by the process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rearranging to solve for &lt;code class=&quot;highlighter-rouge&quot;&gt;total_energy&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;total_energy = co2_removed * energy_per_gallon / co2_per_gallon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One gallon of gasoline converts to about &lt;a href=&quot;https://www.fueleconomy.gov/feg/contentIncludes/co2_inc.htm&quot;&gt;9.1 kg of
CO&lt;sub&gt;2&lt;/sub&gt;&lt;/a&gt;
when burned; for simplicity we’ll also assume that Prometheus’ technology
removes that same amount of CO&lt;sub&gt;2&lt;/sub&gt; per gallon of gasoline produced.  To
make things really simple, we’ll assume that the energy used by the process
comes from carbon-neutral sources.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;total_energy = 36*10^12 kg * 60 kWh/gal / 9.07 kg/gal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get &lt;code class=&quot;highlighter-rouge&quot;&gt;2.38*10^14 kWh&lt;/code&gt;, or 23,800 TWh. By comparison, &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_countries_by_electricity_production&quot;&gt;in 2017 the United
States produced 4,282 TWh of electricity, and worldwide production was 25,551
TWh&lt;/a&gt;.
In other words, this process would consume &lt;strong&gt;56 times the current US electrical
generating capacity&lt;/strong&gt;, and &lt;strong&gt;9 times the current world electrical generating
capacity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Even if Prometheus’ technology removes many, many times more CO&lt;sub&gt;2&lt;/sub&gt; per
gallon of gasoline produced, it would still take sci-fi levels of energy to
offset current emissions.&lt;/p&gt;

&lt;p&gt;Oof. Hopefully I’m wrong.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 May 2019 18:20:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2019/05/21/prometheus-hackernews-climate-change/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/05/21/prometheus-hackernews-climate-change/</guid>
      </item>
    
      <item>
        <title>Vimscript: a search/replace shortcut</title>
        <description>&lt;p&gt;&lt;em&gt;Updated 2 May 2019.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; Vim, but one thing that drove me crazy for a long time was
search/replace. It’s easy to search for the current word under the cursor - just
press &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; in normal mode to start cycling through matches. But replacing that
word can be annoying if it’s really long. You end up with a lot of keystrokes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:%s/mySuperLongVariableName/myNewSuperLongVariableName/gc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One way to save a few keystrokes is to yank &lt;code class=&quot;highlighter-rouge&quot;&gt;mySuperLongVariableName&lt;/code&gt; and paste
it into the search command. You can do this by yanking the text you want to
replace (e.g. select in visual mode and press &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;), typing &lt;code class=&quot;highlighter-rouge&quot;&gt;:%s/&lt;/code&gt; to start the
search, then pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; to paste the search text.&lt;/p&gt;

&lt;p&gt;But that’s still an annoying number of steps. I wrote the script below to start
a search/replace command by simply pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c-s&amp;gt;&lt;/code&gt;. It grabs the current word
under the cursor and prompts for the rest of the replace command.  In other
words, pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c-s&amp;gt;&lt;/code&gt; eliminates need to type &lt;code class=&quot;highlighter-rouge&quot;&gt;:%s/mySuperLongVariableName/&lt;/code&gt;.
Just fill out the rest.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; SearchReplaceCurrentWord&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; cword &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;cword&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; userInput &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':%s/\&amp;lt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; cword &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\&amp;gt;/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; len&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;userInput&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    exe &lt;span class=&quot;s1&quot;&gt;'%s/\&amp;lt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; cword &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\&amp;gt;/'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; userInput
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
noremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SearchReplaceCurrentWord&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Update (2 May 2019): I ran into an issue with the original version of this
script where I accidentally did a replace on a partial match. For instance, I
tried to replace the word &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;barstool&lt;/code&gt;, but in doing so changed
&lt;code class=&quot;highlighter-rouge&quot;&gt;barometric&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;barstoolometric&lt;/code&gt;. Wrapping the search term in &lt;code class=&quot;highlighter-rouge&quot;&gt;\&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;\&amp;gt;&lt;/code&gt;
instead (like &lt;code class=&quot;highlighter-rouge&quot;&gt;:%s/\&amp;lt;this\&amp;gt;/that&lt;/code&gt;) tells Vim to replace whole-word matches only.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Mar 2019 04:11:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2019/03/18/vimscript-search-replace-shortcut/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/03/18/vimscript-search-replace-shortcut/</guid>
      </item>
    
      <item>
        <title>Vimscript: auto-highlight matching words</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/toggle-highlight-480.gif&quot; alt=&quot;:q&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a small script I cobbled together for my &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;. I use it every
single day.  Press &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c-h&amp;gt;&lt;/code&gt; to toggle auto-highlighting of matching words in
normal mode.&lt;/p&gt;

&lt;div class=&quot;language-viml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; ToggleAutoHighlightMatchingWord&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#ToggleAutoHighlightMatchingWordGroup#CursorMoved'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    exe printf&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'match IncSearch /\V\&amp;lt;%s\&amp;gt;/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;      \&lt;/span&gt; escape&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;cword&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    augroup ToggleAutoHighlightMatchingWordGroup
      autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
      autocmd &lt;span class=&quot;nb&quot;&gt;CursorMoved&lt;/span&gt; * exe printf&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'match IncSearch /\V\&amp;lt;%s\&amp;gt;/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;            \&lt;/span&gt; escape&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;cword&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/\'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    augroup END
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; currentTab &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; tabpagenr&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; currentWindow &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; tabpagewinnr&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;currentTab&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    exe &lt;span class=&quot;s1&quot;&gt;'tabdo windo match IncSeach //'&lt;/span&gt;
    exe currentTab &lt;span class=&quot;s1&quot;&gt;'tabn'&lt;/span&gt;
    exe currentWindow &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wincmd w'&lt;/span&gt;
    augroup ToggleAutoHighlightMatchingWordGroup
      autocmd&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
    augroup END
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
noremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; ToggleAutoHighlightMatchingWord&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Mar 2019 07:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2019/03/10/vimscript-highlight-cword/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2019/03/10/vimscript-highlight-cword/</guid>
      </item>
    
      <item>
        <title>TIL: the sticky bit</title>
        <description>&lt;p&gt;&lt;em&gt;Retroactively published on 8 Mar 2019. A while ago I started keeping a journal
of TILs, and I’ve decided to share some of them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today I learned about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sticky_bit&quot;&gt;sticky bit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I set up a Samba share on a Raspberry Pi for our household scanner. The scanner
dumps files into a shared directory, and we can triage them from our computers
or phones. It seemed to be working fine, but then I realized that I wasn’t able
to delete files. I could create and read files, but delete just didn’t work.&lt;/p&gt;

&lt;p&gt;Here’s how the directory looked:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -lah / | grep scanner
drwxrwxrwt   2 scanner scanner 4.0K Oct  7 18:52 scanner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At first I figured there was some sort of group permissions problem. But adding
my user to the &lt;code class=&quot;highlighter-rouge&quot;&gt;scanner&lt;/code&gt; group didn’t solve it.&lt;/p&gt;

&lt;p&gt;Turns out it was the &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; - the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sticky_bit&quot;&gt;sticky
bit&lt;/a&gt;. This was preventing any user who
wasn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;scanner&lt;/code&gt; from deleting files in that directory.&lt;/p&gt;

&lt;p&gt;Removing the sticky bit fixed the problem.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chmod -t /scanner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 07 Oct 2018 08:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2018/10/07/til-sticky-bit/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/10/07/til-sticky-bit/</guid>
      </item>
    
      <item>
        <title>TIL: switching git remotes</title>
        <description>&lt;p&gt;&lt;em&gt;Retroactively published on 8 Mar 2019. A while ago I started keeping a journal
of TILs, and I’ve decided to share some of them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At work we recently migrated our projects from GitLab to Bitbucket. (Sigh… I
miss GitLab CI.) After the repositories were copied to Bitbucket, I had
reshuffle my git remotes and active branches to point to Bitbucket:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote rename origin upstream
$ git remote add origin &amp;lt;new-remote-ssh-url&amp;gt;
$ git checkout master
$ git branch --set-upstream-to origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 01 Aug 2018 08:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2018/08/01/til-changing-git-remotes/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/08/01/til-changing-git-remotes/</guid>
      </item>
    
      <item>
        <title>TIL: git checkout -m</title>
        <description>&lt;p&gt;&lt;em&gt;Retroactively published on 8 Mar 2019. A while ago I started keeping a journal
of TILs, and I’ve decided to share some of them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You’re doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; and you hit some conflicts. You open an offending
file and make changes. But then you realize that you’ve made some &lt;em&gt;bad&lt;/em&gt; changes.
How do you get back to the original merged (albeit conflicted) file?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout -m &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://gitster.livejournal.com/43665.html&quot;&gt;this&lt;/a&gt; post.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Apr 2018 08:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2018/04/03/til-git-checkout-m/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/04/03/til-git-checkout-m/</guid>
      </item>
    
      <item>
        <title>TIL: gron</title>
        <description>&lt;p&gt;&lt;em&gt;Retroactively published on 8 Mar 2019. A while ago I started keeping a journal
of TILs, and I’ve decided to share some of them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today I learned about &lt;a href=&quot;https://github.com/tomnomnom/gron&quot;&gt;gron&lt;/a&gt;, a command-line
utilty that makes it easy to search JSON data.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gron mydata.json | grep -i &quot;big bird&quot;
json.characters[0].name = &quot;Big Bird&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s basically just printing each item in the object line-by-line.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gron mydata.json
json = {};
json.characters = [];
json.characters[0] = {};
json.characters[0].location = &quot;Sesame Street&quot;;
json.characters[0].name = &quot;Big Bird&quot;;
json.characters[1] = {};
json.characters[1].location = &quot;Sesame Street&quot;;
json.characters[1].name = &quot;Oscar the Grouch&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Super helpful, actually.&lt;/p&gt;

&lt;p&gt;Installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install gron&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Apr 2018 08:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2018/04/02/til-gron/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2018/04/02/til-gron/</guid>
      </item>
    
      <item>
        <title>enumerate() and dict.items()</title>
        <description>&lt;p&gt;&lt;em&gt;Updated 8 Mar 2019.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enumerate&lt;/code&gt; is a handy built-in Python function that sometimes gets overlooked.
It’s not life-changing, but it makes things a little cleaner and more concise.&lt;/p&gt;

&lt;p&gt;Let’s say you want to loop through a list, but you want to access both the list
items &lt;em&gt;and&lt;/em&gt; the index value for each item. Here’s one way to do it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, you can do the same thing a little more gracefully with &lt;code class=&quot;highlighter-rouge&quot;&gt;enumerate&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;enumerate&lt;/code&gt;, but for dictionaries. If you were doing
this…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…try this instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Python 3
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; doesn’t exist in Python 2.7, but &lt;code class=&quot;highlighter-rouge&quot;&gt;iteritems&lt;/code&gt; does the same thing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Python 2.7
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteritems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jul 2015 11:39:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2015/07/12/enumerate/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/07/12/enumerate/</guid>
      </item>
    
      <item>
        <title>Countour Confusion</title>
        <description>&lt;p&gt;This is something I run into a lot in the engineering/GIS world - a
misunderstanding of contour data.&lt;/p&gt;

&lt;p&gt;Often, if you ask for a topographic dataset, you’re handed contours. They’re
easy to understand and they look nice on a map.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contours.png&quot; alt=&quot;So pretty.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The problem: many engineers forget that contours are one or more steps removed
from the original topographic data. Somebody surveyed a bunch of points and fed
the points into a GIS/CAD program to draw those those pretty lines. Contours are
generated by interpolating between actual data points. They’re merely a
visualization tool - they’re &lt;em&gt;not&lt;/em&gt; the same or better than the original data.&lt;/p&gt;

&lt;p&gt;This is really problematic when it comes to LiDAR. If you paid for
high-resolution LiDAR, there’s no sense in sharing the data as a set of 2-ft
contours. That’s like taking a picture with a nice digital camera and distributing
wallet-size photocopies instead of the original file, or watching a Blu-ray
movie on an old CRT television. Sure, those 2-ft contours are handy, but they’re
less accurate - especially in flat areas, steep areas, along roads, and in
stream valleys. Basically, places where accuracy is really important. Between
elevation 124 and elevation 126 you could be missing a lot of variation.&lt;/p&gt;

&lt;p&gt;Save the contours for your maps. Build a DEM from the raw data for actual
analysis.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 May 2015 09:16:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2015/05/18/contour-confusion/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/05/18/contour-confusion/</guid>
      </item>
    
      <item>
        <title>git init</title>
        <description>&lt;p&gt;Well, I’ve decided to start a blog of sorts. I guess we’ll see how this goes,
eh?&lt;/p&gt;

&lt;p&gt;Here’s some stuff I might write about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;GIS&lt;/li&gt;
  &lt;li&gt;HEC-RAS&lt;/li&gt;
  &lt;li&gt;TMDLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So… maybe check back later.&lt;/p&gt;
</description>
        <pubDate>Sat, 16 May 2015 21:00:00 -0400</pubDate>
        <link>http://localhost:4000/blog/2015/05/16/first-post/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/05/16/first-post/</guid>
      </item>
    
  </channel>
</rss>
